import logging
import asyncio
import re
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
from aiogram import executor

# Replace YOUR_BOT_TOKEN with your bot token obtained from BotFather
API_TOKEN = '6272908545:AAF2Z3aJCVnFGnDgDC1KaQKh0F8SlfgOSno'

# Configure logging
logging.basicConfig(level=logging.INFO)

# Initialize bot and dispatcher
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)


def split_text(text):
  words_to_remove = ["harm", "laws", ""]
  for word in words_to_remove:
    text = text.replace(word, "")

  words = text.split(' ')
  min_words_first_half = 15
  first_half = ''
  stop_found = False
  for i, word in enumerate(words):
    if i < min_words_first_half:
      first_half += word + ' '
    elif word.endswith('.'):
      first_half += word + ' '
      stop_found = True
      break
    else:
      first_half += word + ' '

  if not stop_found:
    last_period_idx = first_half.rfind('.')
    if last_period_idx > 0:
      first_half = first_half[:last_period_idx + 1]

  second_half = ' '.join(words[len(first_half.split()):])

  # If the first half ends on a word that's also in the second half,
  # move the endpoint of the first half to the previous sentence
  if len(second_half) > 0 and first_half.split()[-1] in second_half.split():
    for i in range(len(first_half.split()) - 2, 0, -1):
      if first_half.split()[i].endswith('.'):
        first_half = ' '.join(words[:i + 1])
        second_half = ' '.join(words[len(first_half.split()):])
        if second_half.startswith(' '):
          second_half = second_half[1:]
        break

  second_half = second_half.replace(
    '\n\n', '\n')  # replace double new lines with single new lines

  return (first_half, second_half)


@dp.message_handler()
async def start_command(message: Message):
  text = message.text.strip()

  words = []  # default value for words

  # Check if any word in the dictionary appears in the message
  found_word = False
  for word in dictionary:
    if word.lower() in text.lower():
      found_word = True
      # Replace the entire message with a bold version of the message
      text = text.replace(word,
                          f'<a href="{dictionary[word]}"><u>{word}</u></a>', 1)
      break

  words_to_remove = ["harm", "word2", "word3"]
  for word in words_to_remove:
    text = text.replace(word, "")

  if 'therefore' in text.lower():
    # Split the input at 'therefore'
    parts = text.lower().split('therefore')
    # Get the first part
    first_part = parts[0].strip()
    # Get the second part
    second_part_sentences = parts[1].split('.')
    first_sentence = second_part_sentences[0].strip() + '.'
    remaining_sentences = '.'.join(second_part_sentences[1:]).strip()
    second_part = first_part + ' ' + remaining_sentences

    # Capitalize the first letter of the first sentence if necessary
    first_sentence = first_sentence.lstrip(',:;./\\').strip()
    first_sentence = first_sentence[0].upper(
    ) + first_sentence[1:] if first_sentence[0].islower() else first_sentence

    # If the first sentence in the second part has less than 10 words, pick the second sentence instead
    second_sentence = second_part_sentences[1].strip() + '.'
    if len(first_sentence.split()) < 10:
      first_half = first_sentence + second_sentence
      second_half = first_part + ' ' + remaining_sentences.replace(
        second_sentence, '').strip()
    else:
      first_half = first_sentence
      second_half = second_part.replace('\n\n', '\n').strip()
  else:
    first_half, second_half = split_text(text)

  # Define the result variable here
  result = ""

  result += f"{first_half}\n\n"
  if second_half:
    result += f"{second_half}\n\n"

  if not found_word and len(words) > 30:
    first_word = list(dictionary.keys())[0]
    result += f"Learn more about {first_word} here: \n {dictionary[first_word]} "
  elif found_word:
    first_word = list(
      filter(lambda w: w.lower() in text.lower(), dictionary.keys()))[0]
    result += f"Learn more about {first_word} here: \n{dictionary[first_word]} "
  else:
    first_word = list(dictionary.keys())[0]
    result += f"Learn more about {first_word} here: \n {dictionary[first_word]} "

  result += "\n\n#SPJ11"
  await message.reply(result, parse_mode="HTML")


# Define dictionary of words and links
dictionary = {
  "word1": "https://example.com/word1",
  "word2": "https://example.com/word2",
  "liquid": "https://example.com/word3"
}

if __name__ == '__main__':
  executor.start_polling(dp, skip_updates=False)
